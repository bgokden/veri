syntax = "proto3";
package veriservice;
// option go_package="github.com/bgokden/veri/veriservice";

// protoc -I veriservice/ veriservice/veriservice.proto --go_out=plugins=grpc:veriservice
// The Veri service definition.
service VeriService {
  rpc Search(SearchRequest) returns (SearchResponse) {}
  rpc Insert(InsertionRequest) returns (InsertionResponse) {}
  rpc Join(JoinRequest) returns (JoinResponse) {}
  rpc DataStream(GetDataRequest) returns (stream Datum) {}
  rpc GetDataInfo(GetDataRequest) returns (DataInfo) {}
  rpc SearchStream(SearchRequest) returns (stream ScoredDatum) {}
  rpc InsertStream(stream InsertionRequest) returns (stream InsertionResponse) {}
}

// Request message for creating a new customer
message SearchRequest {
    SearchConfig config = 1;
    Datum datum = 2;
}

message SearchConfig {
    string scoreFuncName = 1;
    bool higherIsBetter = 2;
    int64 timestamp = 3;
    uint64 timeout = 4;
    uint32 Limit = 5;
    uint64 cacheDuration = 6;
    string dataName = 7;
}

message GetDataRequest {
    string name = 1;
}

message Datum {
  repeated double feature = 1;
  int64 version = 2;
  bytes label = 3;
  bytes groupLabel = 4;
  uint32 size1 = 5;
  uint32 size2 = 6;
  uint32 dim1 = 7;
  uint32 dim2 = 8;
}

message ScoredDatum {
    double score = 1;
    Datum datum = 2;
}

message SearchResponse {
  repeated ScoredDatum result = 1;
}

message InsertionRequest {
  InsertConfig config = 1;
  Datum datum = 2;
  string dataName = 3;
}

message InsertConfig {
    uint64 ttl = 1;
}

message InsertionResponse {
  int32 code = 1;
}

message ServiceMessage {
  repeated string services = 1;
}


message DataInfo {
  string name = 1;
  uint64 timestamp = 2;
  string version = 3;
  repeated double avg = 4;
  repeated double hist = 5;
  uint64 n = 6;
  double maxDistance = 7;
}

message DataConfig {
  string name = 1;
  string version = 2;
  uint64 TargetN = 3;
}

message Peer {
  repeated string addresses = 1;
  string version = 2;
  uint64 timestamp = 3;
  repeated DataConfig data = 4;
  repeated string services = 5;
  repeated Peer peers = 6;
}

message JoinRequest {
  Peer peer = 1;
}

message JoinResponse {
  string address = 1; // received address
}
